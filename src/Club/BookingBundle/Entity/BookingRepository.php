<?php

namespace Club\BookingBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Club\UserBundle\Entity\User;
use Club\UserBundle\Entity\Location;
use Club\BookingBundle\Entity\Booking;
use Club\BookingBundle\Entity\Field;

/**
 * BookingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookingRepository extends EntityRepository
{
    public function getAllBetween(\DateTime $start, \DateTime $end, Field $field)
    {
        return $this->createQueryBuilder('b')
            ->where('(b.status >= :status) AND ((b.first_date <= :start AND b.end_date >= :end) OR (b.first_date <= :start AND b.end_date <= :end AND b.end_date >= :start) OR (b.first_date >= :start AND b.end_date >= :end AND b.first_date < :end) OR b.first_date >= :start AND b.end_date <= :end AND b.end_date >= :start)')
            ->orderBy('b.first_date')
            ->setParameter('status', Booking::CONFIRMED)
            ->setParameter('start', $start->format('Y-m-d H:i:s'))
            ->setParameter('end', $end->format('Y-m-d H:i:s'))
            ->leftJoin('b.field', 'f')
            ->andWhere('f.id = :field')
            ->setParameter('field', $field->getId())
            ->getQuery()
            ->getResult();
    }

    public function getAllByLocationDate(Location $location, \DateTime $date)
    {
        return $this->createQueryBuilder('b')
            ->leftJoin('b.field', 'f')
            ->leftJoin('f.location', 'l')
            ->where('l.id = :location')
            ->andWhere('b.status >= :status')
            ->andWhere('b.first_date BETWEEN :start AND :stop')
            ->setParameter('location', $location->getId())
            ->setParameter('status', Booking::CONFIRMED)
            ->setParameter('start', $date->format('Y-m-d 00:00:00'))
            ->setParameter('stop', $date->format('Y-m-d 23:59:59'))
            ->getQuery()
            ->getResult();
    }

    public function getIntervals(Booking $booking)
    {
    }

    public function getAllFutureBookings(User $user, \DateTime $start)
    {
        return $this->createQueryBuilder('b')
            ->leftJoin('b.users', 'u')
            ->where('b.first_date >= :start')
            ->andWhere('b.status >= :status')
            ->andWhere('(b.user = :user OR u.id = :user)')
            ->setParameter('user', $user->getId())
            ->setParameter('status', Booking::CONFIRMED)
            ->setParameter('start', $start)
            ->getQuery()
            ->getResult();
    }

    public function getLatest(User $user, $limit=10)
    {
        $date = new \DateTime();

        return $this->createQueryBuilder('b')
            ->leftJoin('b.users', 'u')
            ->where('b.first_date < :date')
            ->andWhere('b.status >= :status')
            ->andWhere('(b.user = :user OR u.id = :user)')
            ->orderBy('b.first_date', 'DESC')
            ->setMaxResults($limit)
            ->setParameter('user', $user->getId())
            ->setParameter('status', Booking::CONFIRMED)
            ->setParameter('date', $date)
            ->getQuery()
            ->getResult();
    }

    public function getOldPending()
    {
        $date = new \DateTime();
        $i = new \DateInterval('PT30M');
        $date->sub($i);

        return $this->createQueryBuilder('b')
            ->where('b.created_at < :time')
            ->andWhere('b.status = :status')
            ->setParameter('time', $date)
            ->setParameter('status', Booking::PENDING)
            ->getQuery()
            ->getResult();
    }

    public function getAll(User $user)
    {
        return $this->createQueryBuilder('b')
            ->leftJoin('b.users', 'u')
            ->andWhere('b.status >= :status')
            ->andWhere('(b.user = :user OR u.id = :user)')
            ->setParameter('user', $user->getId())
            ->setParameter('status', Booking::CONFIRMED)
            ->getQuery()
            ->getResult();
    }
}
